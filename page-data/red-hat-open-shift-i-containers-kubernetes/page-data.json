{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/red-hat-open-shift-i-containers-kubernetes","result":{"data":{"post":{"__typename":"MdxPost","slug":"/red-hat-open-shift-i-containers-kubernetes","title":"Red Hat OpenShift I Containers Kubernetes","date":"15.01.2021","tags":[{"name":"Tutorial","slug":"tutorial"},{"name":"Podman","slug":"podman"},{"name":"Docker","slug":"docker"},{"name":"OpenShift","slug":"open-shift"},{"name":"Containers","slug":"containers"},{"name":"Kubernetes","slug":"kubernetes"},{"name":"K8s","slug":"k-8-s"}],"description":"Summary notes for my Red Hat Certified Specialist in OpenShift Application Development EX180 Exam","canonicalUrl":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Red Hat OpenShift I Containers Kubernetes\",\n  \"date\": \"2021-01-15T00:00:00.000Z\",\n  \"description\": \"Summary notes for my Red Hat Certified Specialist in OpenShift Application Development EX180 Exam\",\n  \"tags\": [\"Tutorial\", \"Podman\", \"Docker\", \"OpenShift\", \"Containers\", \"Kubernetes\", \"K8s\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"These are my notes for my exam prep and may not contain all the important aspects.\"), mdx(\"p\", null, \"I am keeping notes for the areas that I find important and worthwile remembering \"), mdx(\"h1\", null, \"Attaching Persistent Storage to Containers\"), mdx(\"p\", null, \"A container runs as a process in the host system, under a host O/S user and group ID \"), mdx(\"p\", null, \"So the host directory needs to be configured with the ownership and permissions allowing access to the container.\"), mdx(\"p\", null, \"In RHEL, the host directory needs to be configured with the appropriate SELinux context \"), mdx(\"p\", null, \"The SELinux context is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"container_file_t\"), \" in RHEL. \"), mdx(\"p\", null, \"Podman uses `container_file_t1 SELinux context restricts the containers access to host files \"), mdx(\"p\", null, \"The purpose is to avoid leakage between the container and host \"), mdx(\"p\", null, \"One way to set up host directory is \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ sudo mkdir /var/dbfiles \\n\\n# If the host machine does not have the exactly the same user defined, the permission should be defined with the numeric userID from the container.\\n# For instance in the case of Red Hat provided MySQL service, the UID is 27 \\n\\n$ sudo chown -R 27:27 /var/dbfiles\\n# the output is: changed ownership of 'var/dbfiles' from root:root to 27:27 \\n\\n# then apply container_file_t context to the directory to allow containers to access to all of its contents \\n\\n$ sudo semanage fcontext -a -t container_file_t '/vardbfiles(/.*)?'\\n\\n# apply SELinux container policy that you set up in the first step to the newly created dir \\n\\n$ sudo restorecon -Rv /var/dbfiles \\n\\n# now you are ready to mount the /vard/dbfiles to the container \\n\\n\")), mdx(\"h1\", null, \"Accessing containers\"), mdx(\"p\", null, \"CNCF sponsors the Container Networking Interface open project. \"), mdx(\"p\", null, \"Podman uses CNI project to implement SDN (software defined network) for containers \"), mdx(\"p\", null, \"Podman attaches each container to a virtual bridge and assign each container a private IP\"), mdx(\"p\", null, \"Container configuration is at /etc/cni/net.d/87-podman-bridge.conflist \"), mdx(\"h1\", null, \"Configuring Registries\"), mdx(\"p\", null, \"In RHEL, the podman configuration is in /etc/containers/registries.conf file \"), mdx(\"p\", null, \"If you are using the latest RHEL, just uncomment the line to include docker.io, quay.io under \", \"[registries.search]\", \" section \"), mdx(\"h1\", null, \"Manipulating Container Images\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"# to save a container as .tar file \\n$ podman save -o [filename.tar] [sourceImage:tag]\\n\\n# to load a tar into images \\n$ podman load -i [filename.tar]\\n\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"These are my notes for my exam prep and may not contain all the important aspects. I am keeping notes for the areas that I find importantâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/red-hat-open-shift-i-containers-kubernetes","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}