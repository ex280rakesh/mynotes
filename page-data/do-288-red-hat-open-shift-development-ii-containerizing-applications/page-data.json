{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/do-288-red-hat-open-shift-development-ii-containerizing-applications","result":{"data":{"post":{"__typename":"MdxPost","slug":"/do-288-red-hat-open-shift-development-ii-containerizing-applications","title":"DO288 Red Hat OpenShift Development II Containerizing Applications","date":"15.01.2021","tags":[{"name":"Tutorial","slug":"tutorial"},{"name":"OpenShift","slug":"open-shift"},{"name":"Containers","slug":"containers"},{"name":"Kubernetes","slug":"kubernetes"},{"name":"K8s","slug":"k-8-s"}],"description":"Summary notes for my Red Hat Certified Specialist in OpenShift Application Development EX180 Exam","canonicalUrl":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"DO288 Red Hat OpenShift Development II Containerizing Applications\",\n  \"date\": \"2021-01-15T00:00:00.000Z\",\n  \"description\": \"Summary notes for my Red Hat Certified Specialist in OpenShift Application Development EX180 Exam\",\n  \"tags\": [\"Tutorial\", \"OpenShift\", \"Containers\", \"Kubernetes\", \"K8s\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Deploying and Managing Applications on OpenShift\"), mdx(\"h2\", null, \"Deploying Applications to OpenShift Cluster\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"After OCP 4.5, oc new-app command creates Deployment instead of DeploymentConfig\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"So we will use $ oc new-app --as-deployment-config during the codes below \")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Build application from the GitHub\\n$ oc new-app --as-deployment-config \", \"[github link]\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Repo contains Dockerfile, so use that instead of S2I\\n$ oc new-app \", \"[github link]\", \" --as-deployment-config --strategy docker \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Registry that contains docker image\\n$ oc new-app -as-deployment-config --docker-image= \", \"[registry link]\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Weird cases, what if repo contains dockerfile as well as index.php? OCP cannot decide in that case, you have to help \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"oc-new app flags\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"--code = github link \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"--docker-image = registry link for the container image \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"--strategy = options: source, docker, pipeline\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"--image-stream or -i = use the image in the ImageStream \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"--as-deployment-config = use DC instead of Deployment \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"image stream flag in detail: instead of public nginx, use rhel nginx in the image stream for example or directly deploy the image stream \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"strategy flag in detail \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"source means, use github and S2I image builder \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"docker means, use the Dockerfile in the github repo to build the image and follow my Dockerfile order \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"pipeline means use the Jenkinsfile to build the image and deployment \")))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"shortcuts for flags that will result in the same outcome\\n$ oc new-app --as-deployment-config \", \"[FLAGS]\", \"\\n*FLAGS COULD BE:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"php~github.repo.link # this tells that use S2I php to build the repo \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"-i php github.repo.link \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"-i php:8.0 github.repo.link # this uses image version 8.0\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"oc new-app creates a BuildConfig, ImageStream, Deployment (DeploymentConfiguration with the flag), and a Service, you need to expose the service to create route\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"How to import docker images to image stream\\n$ oc import-image \", \"[imagename]\", \" --configm --from \", \"[registry link]\", \" --insecure \"))));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Deploying and Managing Applications on OpenShift Deploying Applications to OpenShift Cluster After OCP 4.5, oc new-app command createsâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/do-288-red-hat-open-shift-development-ii-containerizing-applications","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}