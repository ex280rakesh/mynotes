{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/do-288-red-hat-open-shift-development-ii-containerizing-applications","result":{"data":{"post":{"__typename":"MdxPost","slug":"/do-288-red-hat-open-shift-development-ii-containerizing-applications","title":"DO288 Red Hat OpenShift Development II Containerizing Applications","date":"15.01.2021","tags":[{"name":"Tutorial","slug":"tutorial"},{"name":"OpenShift","slug":"open-shift"},{"name":"Containers","slug":"containers"},{"name":"Kubernetes","slug":"kubernetes"},{"name":"K8s","slug":"k-8-s"}],"description":"Summary notes for my Red Hat Certified Specialist in OpenShift Application Development EX180 Exam","canonicalUrl":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"DO288 Red Hat OpenShift Development II Containerizing Applications\",\n  \"date\": \"2021-01-15T00:00:00.000Z\",\n  \"description\": \"Summary notes for my Red Hat Certified Specialist in OpenShift Application Development EX180 Exam\",\n  \"tags\": [\"Tutorial\", \"OpenShift\", \"Containers\", \"Kubernetes\", \"K8s\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"1. Deploying and Managing Applications on OpenShift\"), mdx(\"h2\", null, \"Deploying Applications to OpenShift Cluster\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"After OCP 4.5, oc new-app command creates Deployment instead of DeploymentConfig\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"So we will use $ oc new-app --as-deployment-config during the codes below \")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Build application from the GitHub\\n$ oc new-app --as-deployment-config \", \"[github link]\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Repo contains Dockerfile, so use that instead of S2I\\n$ oc new-app \", \"[github link]\", \" --as-deployment-config --strategy docker \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Registry that contains docker image\\n$ oc new-app -as-deployment-config --docker-image= \", \"[registry link]\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Weird cases, what if repo contains dockerfile as well as index.php? OCP cannot decide in that case, you have to help \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"oc-new app flags\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"--code = github link \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"--docker-image = registry link for the container image \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"--strategy = options: source, docker, pipeline\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"--image-stream or -i = use the image in the ImageStream \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"--as-deployment-config = use DC instead of Deployment \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"image stream flag in detail: instead of public nginx, use rhel nginx in the image stream for example or directly deploy the image stream \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"strategy flag in detail \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"source means, use github and S2I image builder \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"docker means, use the Dockerfile in the github repo to build the image and follow my Dockerfile order \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"pipeline means use the Jenkinsfile to build the image and deployment \")))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"shortcuts for flags that will result in the same outcome\\n$ oc new-app --as-deployment-config \", \"[FLAGS]\", \"\\n*FLAGS COULD BE:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"php~github.repo.link # this tells that use S2I php to build the repo \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"-i php github.repo.link \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"-i php:8.0 github.repo.link # this uses image version 8.0\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"oc new-app creates a BuildConfig, ImageStream, Deployment (DeploymentConfiguration with the flag), and a Service, you need to expose the service to create route\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"How to import docker images to image stream\\n$ oc import-image \", \"[imagename]\", \" --configm --from \", \"[registry link]\", \" --insecure \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"oc new-app for subfolder of github, use --context-dir for the folder selection \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"how to rebuild an app, that doesn't have auto build trigger?\\n$ oc start-build \", \"[buildconfig name]\"))), mdx(\"h2\", null, \"Managing Applications with CLI\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"open remote shell in a container in the pod alpha\\n$ oc rsh alpha \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"open a remote shell in pod alfa and run ls command\\n$ oc rsh alpha ls \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"copy file into a running container\\n$ oc cp \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"edit a resource (oc get ... -o yaml + oc apply combo )\\n$ oc edit \"))), mdx(\"h1\", null, \"2. Designing Containerized Applications for OpenShift\"), mdx(\"h2\", null, \"Building Container images with Dockerfile\"), mdx(\"h3\", null, \"Adapting Dockerfiles For OpenShift:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"When you write a Dockerfile that builds an image to run on OCP, you need to address:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Directories/files that are read from/written to by processes in the container should be owned by the root group \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Executable files should have executable permissions \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Processes must not listen ion priviliged ports (below 1024)\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"so add the following to the dockerfile to deal with the first two \"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"RUN chgrp -R 0 [directory/here] && chmod -R g=u [directory/here]\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"By default OpenShift Container Platform runs containers using arbitrary User IDs. So the container user does not have Root USER priviliges \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Note that Root User is different from Root Group. Root group does not have priviliged rights, it is only root User that has.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"So for an image to support running as an arbitrary user, it must be part of Root Group. \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"How to change the port to run above 1024 on Dockerfile \"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"EXPOSE 8080\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"What if I am relying on parent Dockerfile, with ONBUILT?\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"# On child dockerfile, i.e. httpd on port 80\\nRUN sed -i \\\"s/Listen 80/Listen 8080/g\\\" /etc/httpd/conf/httpd.conf \\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How to change the user id?\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"# Dont use a name, user number \\nUSER 1001\\n\")), mdx(\"h2\", null, \"How to Inject Configuration Data into Application?\"), mdx(\"h3\", null, \"How to Create Secret / ConfigMaps\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"How to create configmap from literals\\n$ oc create configmap config_map_name --from-literal key1=value1 --fron-literal key2=value2\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"How to create secret ?\\n$ oc create secret generic secret_name --from-literal username=user1 --from-literal password=password1\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"How to create configmap from a file\\n$ oc create configmap config_map_name --from-file /home/file.txt \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Where file name is the key and values inside the file.txt is the value \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"ConfigMap can be shortened as cm \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"How to create a secret from file ?\\n$ oc create secret generic my_secret --from-file /home/secret.txt \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"How to edit YAML instead of base64 encoding for the passwords/usernames\\nUse 'stringValue' instead of 'data' for JSON key. See Below for the full example \"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"apiVersion: v1 \\nstringValue: #instead of data \\n  username: user1\\n  password: pass1\\nkind: Secret\\nmetadata:\\n  name: my_secret\\n  type: Opaque\\n\")), mdx(\"h2\", null, \"Injecting Secrets and Configuration to Pods\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"to inject as env var \")), mdx(\"p\", null, \"$ oc set env dc/mydcname --from configmap/myconfig\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"to inject secret as env \")), mdx(\"p\", null, \"$ oc set env dc/mydcname --from secret/mysecret\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"to inject cm as volume \")), mdx(\"p\", null, \"$ oc set volume dc/mydcname --add -t configmap -m /var/path --name myvol --configmap-name myconf \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"a lot to unpack, --add is for addition, -t is for type, -m mount path --name is volume name, --configmap-name is obvious \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"to inject secret as volume \"))), mdx(\"p\", null, \"$ oc set volume dc/mydcname --add -t secret -m /var/path --name myvol --secret-name mysecret \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"how to prevent dc to rollout for every configmap change (in case multiple provided back to back )\")), mdx(\"p\", null, \"$ oc set triggers dc/mydcname --from-config --remove \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"how to start dc to rollout everytime a change is made \")), mdx(\"p\", null, \"$ oc set triggers dc/mydcname --from-config \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"how to rollout the latest deployment, after configuration changes?\")), mdx(\"p\", null, \"$ oc rollout latest mydcname \"), mdx(\"h1\", null, \"3. Publishing enterprise Container Images\"), mdx(\"h2\", null, \"Managing Images in an Enterprise / Public Registry\"), mdx(\"p\", null, \"Aim:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Copy image from one registry to another with Skopeo\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Deploy the application image from a public or enterprise registry\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To deploy the image you have to create docker pull secret \")))), mdx(\"p\", null, \"Let's begin:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Login to quay.io where we will store the image podman \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ podman login -u username quay.io\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"copy the oci image to quayio with skopeo \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ skopeo copy oci:/home/folder/path docker://quay.io/user/image:tag \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"inspect the image if you want or search for it or run it locally to ensure that it is running \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ skopeo inspect docker://quay.io/user/image:tag \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ podman search imagename \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ podman run imagename \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Deploy the image to OpenShift\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"login to OpenShift and create a new project \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"If you try to deploy the image from an external registry it will fail \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc new-app --docker-image quay.io/etc #THIS WILL FAIL BECAUSE OCP NEEDS CREDENTIALS\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Create a secret \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc create secret generic secretname --from-file .dockerconfigjson=/path/to/auth.json --type kubernetes.io/dockerconfigjson\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"if you are using dockercfg as .dockercfg file instead of .docker/config.json file, then type is kubernetes.io/docercfg\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Link the secret \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc secrets link default secretname --for-pull \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Now create the application \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc new-app --as-deployment-config --name name --docker-image quay.io/image/name:tag \")))), mdx(\"h2\", null, \"Allowing Access to OpenShift Registry\"), mdx(\"p\", null, \"Aim:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Access the OCP Internal Registry with Linux container tools (docker/podman)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"You need admin rights to expose the internal container registry \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"OpenShift Image Registry Operator manages the registry and settings are in the cluster config in openshift-image-registry namespace \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To expose the registry \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc patch config cluster -n openshift-image-registry --type merge -p '{\\\"spec\\\":{\\\"defaultRoute\\\":true}}'\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Get the route \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc get routes -n openshift-image-registry \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"login to docker / podman with ocp \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ HOST=$(oc get route default-route -n openshift-image-registry --template='{{ .spec.host }}')\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ podman/docker login -u $(oc whoami) -p $(oc whoami -t) $HOST\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"inspect with skopeo after podman/docker login\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ skopeo inspect --creds=$(oc whoami):$(oc whoami -t) docker://namespace-route-openshift.domain/namespace/app \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"copy image to ocp registry \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ skopeo copy --dest-creds=$(oc whoami):$(oc whoami -t) SOURCE-IMAGE DESTINATION-IMAGE\")))), mdx(\"h2\", null, \"Creating Image Streams\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"list image streams \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc get is \", \"[-n namespace if you want to see imgs from other ns, -o name if you just want the names ]\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"get the is tag \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc get istag \")))), mdx(\"h3\", null, \"Import Image from Other Repository into OCP Internal Registry\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"import from another registry \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc import-image myis\", \"[:tag]\", \" --confirm --from registry/image:tag \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"to update the image stream with the latest from the registry\\n$ $ oc import-image myis\", \"[:tag]\", \" --confirm \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"to create image streams from other repos you need pull secrets\"))), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"so login with podman to the repo \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"create generic secret \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"import image \")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ podman login -u username -p password registry.link \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc create secret generic registrytokenname --from-file .dockerconfigjson=/path --type kubernetes.io/dockerconfigjson\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc import-image myis:1.0 --confirm --from registry.link\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"to deploy the app via is \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc new-app --as-deployment-config -i myis:1.0\")), mdx(\"h3\", null, \"Sharing IS between namespaces\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create a secret with an access token to the private registry only on the project where you create the image stream\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Configure that image steam with a local reference policy. \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Grant rights to use the image stream to service accounts from each project that uses the image steam. \")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ podman login -u user -p password \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc new-project \", \"[myNewNamespaceThatWillImportImages]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc new-project \", \"[shared]\", \" \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc create secret generic regtoken --from-file .dockerconfigjson=/path -t kubernetes.io/dockerconfigjson\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc import is \", \"[myis]\", \" --confirm --reference-policy local --from \", \"[internal.ocp.registry]\", \" # add reference policy\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc policy add-role-to-group system:image-puller system:serviceaccounts:\", \"[myNewNamespaceThatWillImportImages]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ oc new-app --as-deployment-config -i shared/\", \"[myis]\", \" \")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"1. Deploying and Managing Applications on OpenShift Deploying Applications to OpenShift Cluster After OCP 4.5, oc new-app command creates…","timeToRead":5,"banner":null}},"pageContext":{"slug":"/do-288-red-hat-open-shift-development-ii-containerizing-applications","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}