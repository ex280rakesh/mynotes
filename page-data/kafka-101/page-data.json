{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/kafka-101","result":{"data":{"post":{"__typename":"MdxPost","id":"c134d118-58f1-56b2-be50-c408baed9ce3","slug":"/kafka-101","title":"Kafka 101","date":"14.02.2020","tags":[{"name":"Tutorial","slug":"tutorial"},{"name":"Kafka","slug":"kafka"},{"name":"Distributed Computing","slug":"distributed-computing"}],"description":"Kafka","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Kafka 101\",\n  \"date\": \"2020-02-14T00:00:00.000Z\",\n  \"description\": \"Kafka\",\n  \"tags\": [\"Tutorial\", \"Kafka\", \"Distributed Computing\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Kafka Concepts\"), mdx(\"h1\", null, \"Start Server\"), mdx(\"h2\", null, \"Start Zookeeper and Kafka Servers\"), mdx(\"p\", null, \"After downloading the binary, unzip it and go to the main folder that is unzipped\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ tar -xzf kafka_zipped_version_here.tgz\\n$ cd kafka_unzipped_folder\\n\")), mdx(\"p\", null, \"Start Zookeeper server:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ bin/zookeeper-server-start.sh config/zookeeper.properties\\n\")), mdx(\"p\", null, \"On another terminal, start Kafka server:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ bin/kafka-server-start.sh config/server.properties\\n\")), mdx(\"h2\", null, \"Create a topic\"), mdx(\"p\", null, \"To create a topic on the zookeeper, with 3 partition and single replica factor\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ kafka-topics zookeeper 127.0.0.1:2181 --topic first_topic --create --partitions 3 --replication-factor 1\\n\")), mdx(\"p\", null, \"Recall that the replica factor cannot be greater than the brokers, if you have a single broker, you cannot have a replica broker...\"), mdx(\"p\", null, \"To see the details of the first_topic \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ kafka-topics zookeeper 127.0.0.1:2181 --topic first_topic --describe\\n\")), mdx(\"p\", null, \"To list the topics \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ kafka-topics zookeeper 127.0.0.1:2181 --list\\n\")), mdx(\"p\", null, \"To delete the topic, other than Windows systems\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ kafka-topics zookeeper 127.0.0.1:2181 --topic first_topic --delete\\n\")), mdx(\"h2\", null, \"Producer\"), mdx(\"p\", null, \"Now we created topics, let's send datastreams to the topics \"), mdx(\"p\", null, \"First of all, let's get the help file \"), mdx(\"p\", null, \"When you are in the installation folder in your linux terminal, type:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ bin/kafka-console-producer.sh\\n\")), mdx(\"p\", null, \"This shows the help concepts, note that --broker-list and --topic are required fields to send data to the brokers \"), mdx(\"p\", null, \"To send data on the first_topic just type\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ bin/kafka-console-producer.sh --broker-list 127.0.0.1:9092 --topic first_topic \\n>\\n\")), mdx(\"p\", null, \"when you hit enter, a caret will appear, and you can type your messages\\nto end the message stream, hit Ctrl + C\"), mdx(\"h2\", null, \"Consumer\"), mdx(\"p\", null, \"Now we created data producers, let's consume them \"), mdx(\"p\", null, \"First of all, let's get the help file \"), mdx(\"p\", null, \"When you are in the installation folder in your linux terminal, type:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ bin/kafka-console-consumer.sh\\n\")), mdx(\"p\", null, \"Note that the bootstrap-server is required, while not noted as required, the topic is also used \"), mdx(\"p\", null, \"to consume the data from the topic \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ bin/kafka-console-consumer.sh --bootstrap-server 127.0.0.1:9092 --topic first_topic \\n\")), mdx(\"p\", null, \"when you hit the enter, there is a caret that appears but we cannot read any message from the first topic \"), mdx(\"p\", null, \"This is because, we set the consumer to read the messages realtime from now on\"), mdx(\"p\", null, \"So, if you open a new console and start feeding messages to the first_topic, you will see the message appearing on the consumer terminal \"), mdx(\"p\", null, \"Let's do it, don't close the consumer console above but start another console\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ bin/kafka-console-producer --broker-list 127.0.0.1:9092 --topic first_topic \\n> my first datastream \\n\")), mdx(\"p\", null, \"should appear on the consumer terminal as well, voila! \"), mdx(\"p\", null, \"To read all messages from the beginning, just add the --from-beginning flag to the end \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ bin/kafka-console-consumer.sh --bootstrap-server 127.0.0.1:9092 --topic first_topic --from-beginning\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Kafka Concepts Start Server Start Zookeeper and Kafka Servers After downloading the binary, unzip it and go to the main folder that isâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/kafka-101"}}}