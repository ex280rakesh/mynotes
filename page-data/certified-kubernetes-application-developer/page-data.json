{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/certified-kubernetes-application-developer","result":{"data":{"post":{"__typename":"MdxPost","id":"e4cc884d-5371-58f3-bf62-bd1998feed5d","slug":"/certified-kubernetes-application-developer","title":"Certified Kubernetes Application Developer","date":"10.02.2020","tags":[{"name":"Tutorial","slug":"tutorial"},{"name":"CKAD","slug":"ckad"},{"name":"Kubernetes","slug":"kubernetes"},{"name":"K8s","slug":"k-8-s"}],"description":"Summary notes for my preparation of CKAD, Certified Kubernetes Application Developer Exam","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Certified Kubernetes Application Developer\",\n  \"date\": \"2020-02-10T00:00:00.000Z\",\n  \"description\": \"Summary notes for my preparation of CKAD, Certified Kubernetes Application Developer Exam\",\n  \"tags\": [\"Tutorial\", \"CKAD\", \"Kubernetes\", \"K8s\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This post is just notes to myself for my CKAD exam prep \"), mdx(\"p\", null, \"Linux Foundation and CNCF together prepare CKAD exam\"), mdx(\"p\", null, \"DEVOPS15 gets you 15% discount when registering for the exam \"), mdx(\"h1\", null, \"Core Concepts\"), mdx(\"h2\", null, \"Nodes, Clusters\"), mdx(\"p\", null, \"Node is a single machine, that can have multiple pods \"), mdx(\"p\", null, \"Cluster is the combination of multiple machines, or nodes \"), mdx(\"p\", null, \"Master node is configured to manage cluster of machines \"), mdx(\"h2\", null, \"Components\"), mdx(\"p\", null, \"API Server: the front end of the cluster \"), mdx(\"p\", null, \"etcd: store the data to manage the cluster, key:value pairs\"), mdx(\"p\", null, \"Scheduler: distributing works across the cluster\"), mdx(\"p\", null, \"Controller: brain of the cluster, makes decision to run containers\"), mdx(\"p\", null, \"Container runtime: in this case docker \"), mdx(\"p\", null, \"kubelet: agents running in the nodes \"), mdx(\"h2\", null, \"Master vs Worker nodes\"), mdx(\"p\", null, \"Worker node is where containers are hosted\"), mdx(\"p\", null, \"We need container runtime to execute container processes \"), mdx(\"p\", null, \"Pod is the simplest form of K8s object\"), mdx(\"p\", null, \"Pod has 1 to 1 relationship between Pod and Container, thus to scale up, increase pods\"), mdx(\"p\", null, \"However, if there is a helper container, it can be deployed to the pod too\"), mdx(\"p\", null, \"Remember, aim is to build replicas that can be increased/decreased as necessary\"), mdx(\"p\", null, \"To find the Nginx image from dockerhub and run in a pod \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-noLineNumbers\"\n  }), \"$ kubectl run nginx --image nginx\\n\")), mdx(\"p\", null, \"then get the pods running \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-noLineNumbers\"\n  }), \"$ kubectl get pods\\n\")), mdx(\"p\", null, \"It is also possible to deploy a pod via yaml file \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-:title=pod.definition.yaml\",\n    \"metastring\": \"noLineNumbers\",\n    \"noLineNumbers\": true\n  }), \"apiVersion: v1\\nkind: Pod \\nmetadata:\\n  name:myapp-pod\\n  label:\\n    app: myapp\\n    type: front-end\\n  annotation:\\nspec:\\n  containers: \\n    - name: my-container-name-definition\\n      image: nginx \\n\\n\")), mdx(\"p\", null, \"Metadata children are name and labels \"), mdx(\"h2\", null, \"Pods\"), mdx(\"p\", null, \"To create a redisapp pod with redis image imperative way \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-noLineNumbers\"\n  }), \"$ kubectl run redis --image=redis --generator=run-pod/v1\\n\")), mdx(\"p\", null, \"For more info on generators:\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://kubernetes.io/docs/reference/kubectl/conventions/#generators\"\n  }), \"https://kubernetes.io/docs/reference/kubectl/conventions/#generators\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To edit pods where a pod definition is not given\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-noLineNumbers\"\n  }), \"$ kubectl get pod <pod-name> -o yaml > pod-definition.yaml\\n\")), mdx(\"p\", null, \"Important: you have to delete and re-create the pod \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-noLineNumbers\"\n  }), \"$ kubectl delete pod <pod-name>\\n$ kubectl apply -f pod-definition.yaml\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To edit pod properties\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-noLineNumbers\"\n  }), \"$ kubectl edit pod <pod-name>\\n\")), mdx(\"h2\", null, \"Replication controller\"), mdx(\"p\", null, \"We need replication controller to manage the desired state and scaling\"), mdx(\"p\", null, \"Replication controller is the old version of the Replica Sets \"), mdx(\"p\", null, \"Skeleton yaml file below for Replication Controller, not complete\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-:title=rc-definition.yaml\",\n    \"metastring\": \"noLineNumbers\",\n    \"noLineNumbers\": true\n  }), \"apiVersion: v1\\nkind: ReplicationController\\nmetadata:\\n\\nspec:\\n  template:\\n  ... #Pod definition here, without apiVersion and kind \\n  replicas: 3\\n\")), mdx(\"p\", null, \"A simple version\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-:title=rc-definition.yaml\",\n    \"metastring\": \"noLineNumbers\",\n    \"noLineNumbers\": true\n  }), \"apiVersion\\nkind: ReplicationController\\nmetadata:\\n  name: myapp-rc\\n  labels:\\n    app: myapp\\n    type: front-end\\nspec:\\n  template:\\n    metadata:\\n      name: myapp\\n      labels:\\n        app:myapp\\n    spec:\\n      containers:\\n      - name: nginx-controller\\n        image: nginx\\n  replicas: 3\\n\")), mdx(\"p\", null, \"Now let's look at a replicaset definition: \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-:title=replicaset-definition.yaml\",\n    \"metastring\": \"noLineNumbers\",\n    \"noLineNumbers\": true\n  }), \"apiVersion: apps/v1\\nkind: ReplicaSet\\nmetadata:\\n  name: myapp-rs\\n  labels:\\n    app: myapp\\n    type: front-end\\nspec:\\n  template:\\n    metadata:\\n      name: myapp\\n      labels:\\n        app:myapp\\n    spec:\\n      containers:\\n      - name: nginx-controller\\n        image: nginx\\n  replicas: 2\\n  selector:\\n    matchLabels:\\n      app:myapp\\n\")), mdx(\"p\", null, \"Note that replicaset requires selectors, unlike replica controller \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"declarative way to update replicaset pods \")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-noLineNumbers\"\n  }), \"$ kubectl replace -f replicaset-manifest.yaml\\n\")), mdx(\"p\", null, \"where in the replicaset-manifest.yaml file we updated the replicas \"), mdx(\"p\", null, \"another way is to just update the file and use apply command \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-noLineNumbers\"\n  }), \"$ kubectl apply -f replicaset-manifest.yaml\\n\")), mdx(\"p\", null, \"the imperative ways of doing the same:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-noLineNumbers\"\n  }), \"$ kubectl scale --replicas=3 rs/myapp\\n#OR\\n$ kubectl scale --replicas=3 -f replicaset-manifest.yaml \\n#OR \\n$ kubectl scale --replicas=3 replicaset name=myapp\\n\")), mdx(\"p\", null, \"the code above assumes that repliaset is different than 3, and the replicaset name is myapp\"), mdx(\"h2\", null, \"Deployments\"), mdx(\"p\", null, \"Create a deployment and scale it up, imperatively \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-noLineNumbers\"\n  }), \"$ kubectl create deployment webapp --image=kodekloud/webapp-color\\n$ kubectl scale deployment/webapp --replicas=3\\n\")), mdx(\"p\", null, \"then expose the deployment created, containers listen on 8080 and expose the service port 30082, expose as NodePort\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-noLineNumbers\"\n  }), \"$ kubectl expose deployment webapp --type=NodePort --port=30082 --target-port=8080 --name=webapp-service\\n\")), mdx(\"h2\", null, \"Namespaces\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"to create a namespace, you can use a yaml file with namespace in the metadata \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"you can also do it imperatively by creating a ns, $ kubectl create ns namespace-name\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"to refer to other pods in another namespace, just append --namespace flag to the end \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"to create pods in an another namespace, you can also use namespace tag under the metadata, similar to name, label, annotations \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"to switch, use set-context  under the config \"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-noLineNumbers\"\n  }), \"$ kubectl config set-context mycurrentnamespace --namespace=myothernamespace\\n\")), mdx(\"p\", null, \"if you don't remember your current context or don't want to look it up \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-noLineNumbers\"\n  }), \"$ kubectl config set-context $(kubectl config current-context) --namespace=SwitchToThisNamespace\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"to set quota for a namespace, you can use ResourceQuota kind yaml\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-:title=rc-definition.yaml\",\n    \"metastring\": \"noLineNumbers\",\n    \"noLineNumbers\": true\n  }), \"apiVersion: v1\\nkind: ResourceQuota\\nmetadata:\\n  name: compute-quota\\n  namespace: dev\\nspec:\\n  hard:\\n    pods: \\\"10\\\"\\n    requests.cpu: \\\"4\\\"\\n    requests.memory: 5Gi\\n    limits.cpu: \\\"10\\\"\\n    limits.memory: 10Gi\\n\")), mdx(\"h1\", null, \"Configuration\"), mdx(\"h2\", null, \"Commands and Arguments in YAML\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Docker Commands\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To run a container use \"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-noLineNumbers\"\n  }), \"$ docker run <image-name>\\n\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"docker build from dockerfile \"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Dockerfile:title=Dockerfile\"\n  }), \"FROM busybox\\nCMD [\\\"Sleep\\\", \\\"5\\\"]\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Then use docker build function to run the Ubuntu container\\nThe Ubuntu container will run and exit after 5 seconds \")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"What if you want to run the container but sleep after 10 seconds, but wanted to keep the default option as 5 seconds \"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Dockerfile:title=Dockerfile\"\n  }), \"FROM busybox\\nENTRYPOINT [\\\"Sleep\\\"]\\nCMD [\\\"5\\\"]\\n\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-noLineNumbers\"\n  }), \"$ docker build -t mybusybox .\\n$ docker run --name mybboxcontainer mybusybox 10\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"How can you pass these arguments via kubernetes yaml?\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-:title=arguments-manifest.yaml\"\n  }), \"apiVersion: v1\\nkind: Pod\\nmetadata:\\n  name: busybox \\nspec:\\n  containers:\\n    - name: busybox-container\\n      image: mybusybox\\n      args: [\\\"10\\\"]\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"note that the image name must match our docker build image tag, pushed to the dockerhub\\nso we can conclude that args overrides CMD \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"what if I want to override the ENTRYPOINT?, then add command above args \"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-:title=arguments-manifest.yaml\",\n    \"metastring\": \"{9}\",\n    \"{9}\": true\n  }), \"apiVersion: v1\\nkind: Pod\\nmetadata:\\n  name: busybox \\nspec:\\n  containers:\\n    - name: busybox-container\\n      image: mybusybox\\n      command: [\\\"sleep\\\"]\\n      args: [\\\"10\\\"]\\n\")))), mdx(\"h2\", null, \"Environment Variables\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"how to pass environment variables to pods? \"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"...\\nenv: \\n\")))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"name: APP_COLOR\\nvalue: pink \"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Note that the environment variables are arrays, hence the dash \\nStructure must be name/value pairs \\n\")))), mdx(\"p\", null, \"Also possible to pass information via configMaps and Secrets \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"...\\nenv: \\n  - name: APP_COLOR\\n    valueFrom: \\n      configMapKeyRef:\\n\\n  - name: APP_SECRET\\n    valueFrom:\\n      secretKeyRef:\\n\\n...\\n\")), mdx(\"h2\", null, \"configMaps\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Motivation of configMap is to cope with increasing complexity under env tags \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"As the application grows, managing each env under Pod definition gets more complex, so configMaps are to rescue \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"configMap variables are key value pairs and injected to pods \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Typical of k8s, we can do it imperatively and declaratively, before injecting to pods \"))), mdx(\"p\", null, \"Imperatively:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-noLineNumbers\"\n  }), \"$ kubectl create configmap \\n  configName --from-literal=key=value\\n\\n$ kubectl create configmap\\n  configName --from-file=config.filepath\\n\\n\")), mdx(\"p\", null, \"Declaratively:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-noLineNumbers\"\n  }), \"$ kubectl create -f configmap.yaml\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-:title=configmap.yaml\",\n    \"metastring\": \"noLineNumbers\",\n    \"noLineNumbers\": true\n  }), \"apiVersion: v1\\nkind: configMap\\nmetadata: \\n  name: app-config \\ndata:\\n  key:value\\n  anotherkey:anothervalue\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How to refer to configmaps in pod template?\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-:title=pod-template.yaml\",\n    \"metastring\": \"noLineNumbers\",\n    \"noLineNumbers\": true\n  }), \"apiVersion: v1\\nkind: Pod \\nmetadata:\\n  name: simple-app\\n  labels:\\n    env: dev\\nspec: \\n  containers:\\n    - name: containername\\n      image: mycontainerimage\\n      ports:\\n        - containerPort: 8080\\n      envFrom:\\n        - configMapRef:\\n            name: app-config #Must match configMap name \\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"there are 3 ways to inject variables \")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#option 1\\n...\\nenvFrom:\\n  - configMapRef: \\n      name: app-config \\n...\\n#option 2\\nenv: \\n  - name: CONFIG_KEY\\n    valueFrom:\\n      configMapKeyRef:\\n          name: app-config \\n          key: CONFIG_KEY\\n\\n#option 3\\nvolumes:\\n  - name: app-config-volume \\n    configMap:\\n      name: app-config\\n\")), mdx(\"h2\", null, \"Secrets\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Motivation is similar to configMap but for secret items such as api keys or passwords\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Similar to ConfigMaps it can be done imperatively and declaratively \"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-:title=pod-definition-extract.yaml\",\n    \"metastring\": \"noLineNumbers\",\n    \"noLineNumbers\": true\n  }), \"...\\nspec:\\n  containers:\\n    - name: myapp\\n      envFrom: \\n        -secretRef:\\n            name: app-secret\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-:title:\",\n    \"metastring\": \"secrets.yaml noLineNumbers\",\n    \"secrets.yaml\": true,\n    \"noLineNumbers\": true\n  }), \"apiVersion: v1\\nkind: Secret\\nmetadata:\\n  name: app-secret\\ndata:\\n  DB_Host: ab12d3\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"the information under secret.yaml are encrypted using base64, but can be decrypted too \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Secrets can be injected as env, single env and volumes\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Secret volumes mounted to the pod creates individual files\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Since secrets are encoded via base64, it can be decoded as well, so it's not that secure\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"However, if the secrets are not checked into the code repository, can make it safer\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Also, enabling encryption at rest for secrets so they are stored encrpyted in /etcd \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Secrets are sent to pods if only needed, kubelet stores secrets in tmpfs in memory, not on disk and once that pod is deleted, kubelet will delete its local copy of the secret data as well \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"imperatively you can create secrets as:\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-noLineNumbers\"\n  }), \"$ kubectl create secret generic \\n  secretName --from-literal=key=value\\n\")), mdx(\"h2\", null, \"Security Context in Kubernetes\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To allow pod to run as non-root, such as userID 1000, just add the securityContext\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"SecurityContext can also be added to the container level, so that other containers in the pod are not impacted\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-:title=pod-manifest.yaml\",\n    \"metastring\": \"noLineNumbers\",\n    \"noLineNumbers\": true\n  }), \"apiVersion: v1\\nkind: Pod\\nmetadata: \\n  name: myPod\\nspec:\\n# Pod level security\\n  securityContext:\\n    runAsUser: 1000\\n  containers: \\n    - name: Ubuntu\\n      image: Ubuntu\\n      command: [\\\"sleep\\\", \\\"3600\\\"]\\n      # Container level security, run as user 1000 instead of root \\n      securityContext:\\n        runAsUser: 1000\\n        capabilities:\\n          add: [\\\"MAC_ADMIN\\\"] #only on the container level \\n\\n\")), mdx(\"h2\", null, \"Service Accounts\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"In kubernetes, there are user accounts and service accounts \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Humans use service accounts and bots/applications can use service accounts\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Service account examples are monitoring, logging, pipeline management\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Examples are promatheus (unsure if typed correctly) and jenkins\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The applications that interact with my cluster has to be authenticated, for that we use service accounts\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"to create a service account imperatively \"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-noLineNumbers\"\n  }), \"$ kubectl create serviceaccount ServiceAccountName\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"to get service accounts\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-noLineNumbers\"\n  }), \"$ kubectl get serviceaccount\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"to describe the service account, called ServiceAccountName\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-noLineNumbers\"\n  }), \"$ kubectl describe ServiceAccountName\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"When service accounts interact with Kubernetes API, they have to be authenticated\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"When a service account is created, it also creates a Token, the token is saved in the secret object \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Outside the scope of this course, however on a high level the structure for external application to interact with API, you create a service account, assign permissions using role-based control, export the service token to the application to authenticate\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"What if the third party application itself is hosted in the cluster? Then simply mount the secret as a volume to the pod\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To add service account to the pod, just add the following to pod yaml \"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-:title=mypod-manifest.yaml\",\n    \"metastring\": \"{9}\",\n    \"{9}\": true\n  }), \"apiVersion: v1\\nkind: Pod \\nmetadata:\\n  name: my-k8s-dashboard\\nspec:\\n  containers:\\n  - name: mypodname\\n    image: mypodimage\\n  serviceAccount: dashboard-sa # the name of the serviceAccount object\\n\\n\")), mdx(\"h2\", null, \"Resource Requirements\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Set the pod's CPU, Memory and Disk Requirements\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"K8s schedules the application to the necessary node\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"If there is no sufficient space available in the node, then it fails\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To set the resource requirements, add the following to the container definition \"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-:title=mypod-manifest.yaml\",\n    \"metastring\": \"{8-11}\",\n    \"{8-11}\": true\n  }), \"apiVersion: v1\\nkind: Pod \\n...\\nspec:\\n  containers:\\n  - name: myapp\\n    image: containerimage\\n    resources:\\n      request:\\n        memory: \\\"1Gi\\\"\\n        cpu: 0.5 \\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"also can set the limits\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-:title=mypod-manifest.yaml\",\n    \"metastring\": \"{8-11}\",\n    \"{8-11}\": true\n  }), \"apiVersion: v1\\nkind: Pod \\n...\\nspec:\\n  containers:\\n  - name: myapp\\n    image: containerimage\\n    resources:\\n      requests:\\n        memory: \\\"1Gi\\\"\\n        cpu: 0.5\\n      limits:\\n        memory: \\\"2Gi\\\"\\n        cpu: 2\\n\\n\")), mdx(\"h2\", null, \"Taints & Tolerations\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The motivation is to set Pod and Node relationship, so selected Pods can / cannot be run on selected Nodes\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Tainting is applied to the Node and Toleration is applied to the Pod \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Pods without taint toleration cannot be scheduled on the tainted Node \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"How to taint a node \"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-noLineNumbers\"\n  }), \"$ kubectl taint nodes node-name key=value:taint-effect\\n\")), mdx(\"p\", null, \"where taint-effect is what happens to Pods that do not tolerate this taint \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"there are three taint effects\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \" NoSchedule: do not execute, what we have been discussing\\n\"), \" PreferNoSchedule: try not to schedule here\\n** NoExecute: do not schedule new and if there is any non-tolerant pods kill the pod (careful pods are gone!)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"How to tolerate a pod \"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-noLineNumbers\"\n  }), \"$ kubectl taint nodes node1 app=express: NoSchedule\\n\\n--- mypod.yaml \\napiVersion: v1\\nkind: Pod\\nmetadata: \\n  name: myserver\\nspec:\\n  containers:\\n  - name: express-container\\n    image: node\\n  tolerations:\\n  - key: \\\"app\\\" #see app on the taint function above \\n    operator: \\\"Equal\\\" # see the equal sign on the taint function above \\n    value: \\\"express\\\"\\n    effect: \\\"NoSchedule\\\" \\n\")), mdx(\"p\", null, \"Note that toleration to taint does not guarantee that the tolerant Pod will run on the tainted Node, see Affinity Rules for that requirement \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"For untaint, check $ kubectl taint -h \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To see which nodes the pods are running on $ kubectl get pods -o wide \"))), mdx(\"h2\", null, \"Node Selectors\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The objective is to select certain Node, i.e. database pod should run on a higher CPU machine \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Say you want to add your application to a node that has significant CPU power, thus in your pod manifest you can add nodeSelector command \"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-:title=my-pod-manifest.yaml\"\n  }), \"\\napiVersion: v1\\nkind: Pod \\nmetadata:\\n  name: my-app\\nspec:\\n  containers:\\n  - name: my-sifnificant-resource-requiring-app \\n    image: dockerhub-image-name\\n  nodeSelector:\\n    sizeCPU: significantlyhigh\\n\")), mdx(\"p\", null, \"note that nodeSelector key/value pair is something we define, thus we should name the node to match this pod manifest \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-noLineNumbers\"\n  }), \"$ kubectl label nodes NodeName label-key=value-key\\n$ kubectl label nodes myNode sizeCPU=significantlyhigh\\n\")), mdx(\"p\", null, \"Note that the node selectors work for single label and cannot use logical operators, such as select any node where the label is either X or Y, or select any node where the label is NOT equal to X \"), mdx(\"p\", null, \"To select nodes such as above, use Node Affinity\"), mdx(\"h2\", null, \"Node Affinity\"), mdx(\"p\", null, \"TODO: complete this section \"), mdx(\"h1\", null, \"Multi-Container Pods\"), mdx(\"h2\", null));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"This post is just notes to myself for my CKAD exam prep  Linux Foundation and CNCF together prepare CKAD exam DEVOPS15 gets you 15% discount…","timeToRead":5,"banner":null}},"pageContext":{"slug":"/certified-kubernetes-application-developer"}}}